
name: CI

on:
  push:
    branches:
      - main

env:
  LIBRARY_PROJECT_FILE: AdventOfCode.Kit.Console/AdventOfCode.Kit.Console.csproj
  RELEASE_PATH: $(pwd)/Release
  DOTNET_VERSION: 6.x
  CONFIGURATION: Release
  VERSION: 0.0.0

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core SDK ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore project dependencies
      run: dotnet restore ${{ env.LIBRARY_PROJECT_FILE }}

    - name: Build the project - ${{ env.CONFIGURATION }}
      run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }} ${{ env.LIBRARY_PROJECT_FILE }}

    - name: Install .NET tools from local manifest
      run: dotnet tool restore

    - name: Run unit tests - Release
      run: dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(pwd)/TestResults/Coverage/
      continue-on-error: true

    # - name: Create code coverage report
    #   run: dotnet tool run reportgenerator -reports:$(pwd)/**/coverage.cobertura.xml -targetdir:$(pwd)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines

    # - name: Publish code coverage report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: code-coverage-report
    #     path: $(pwd)/CodeCoverage

    - name: Pack the project - Release
      run: dotnet pack --no-build --configuration ${{ env.CONFIGURATION }} --output ${{ env.RELEASE_PATH }} ${{ env.LIBRARY_PROJECT_FILE }} /p:PackageVersion=${{ env.VERSION }}

    # - name: Publish NuGet package
    #   run: dotnet nuget push '**/*.nupkg' -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

    # - name: Publish the project - Release
    #   run: dotnet publish --no-build --configuration Release --output $(pwd)/Release '**/*.csproj'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ env.VERSION }}
        path: ${{ env.RELEASE_PATH }}