name: $(Major).$(Minor)$(Rev:.r)

trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-20.04'

variables:
  BuildConfiguration: 'Release'
  DotnetSdkVersion: '6.x'
  NugetPackageFeedName: 'AdventOfCodeKit'
  Major: '0'
  Minor: '0'
    
steps:

- task: UseDotNet@2
  displayName: 'Use .NET SDK $(DotnetSdkVersion)'
  inputs:
    version: '$(DotnetSdkVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(BuildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(BuildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Install .NET tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(BuildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Create code coverage report'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

- task: DotNetCoreCLI@2
  displayName: 'Pack the project - $(buildConfiguration)'
  inputs:
    command: 'pack'
    projects: '**/*.csproj'
    arguments: '--no-build --configuration $(buildConfiguration)'
    versioningScheme: byBuildNumber

- task: NuGetCommand@2
  displayName: 'Publish NuGet package'
  inputs:
    command: push
    feedPublish: '$(System.TeamProject)/$(NugetPackageFeedName)'
    allowPackageConflicts: true
    condition: succeeded()

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(BuildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(BuildConfiguration)'
    zipAfterPublish: true

- publish: '$(Build.ArtifactStagingDirectory)'
  artifact: drop